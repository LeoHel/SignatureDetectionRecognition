{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"OCR","provenance":[],"collapsed_sections":["ONKnkFLOOTkR"],"mount_file_id":"1YNzB_oVe-6DEzf9Lk0yFHmceAzx4UXjl","authorship_tag":"ABX9TyMmyfuuS0dePj3iKRqguFmY"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","metadata":{"id":"kgyECA4f16WI"},"source":["# Evaluation for OCR\n","\n","Every implemented solution for OCR is listed here. By default, only time logs will be created. To determine CER and WER, the additional output cell has to be run. This notebook is structured for easier navigation.\n","\n","Preprocessing HAS to be run once before any evaluation can take place!"]},{"cell_type":"markdown","metadata":{"id":"Fd3vlgiiGRWq"},"source":["# Preprocessing\n","\n","run once to load methods"]},{"cell_type":"code","metadata":{"id":"XBUu_hV-GQWB","executionInfo":{"status":"ok","timestamp":1633076736797,"user_tz":-120,"elapsed":647,"user":{"displayName":"Leon Heller","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16860286207446221136"}}},"source":["import cv2\n","import numpy as np\n","\n","# get grayscale image\n","def get_grayscale(image):\n","    return cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\n","\n","# noise removal - blur\n","def blur(image):\n","    return cv2.medianBlur(image,5)\n"," \n","# thresholding\n","def thresholding(image):\n","    return cv2.adaptiveThreshold(image, 255, cv2.ADAPTIVE_THRESH_MEAN_C, cv2.THRESH_BINARY, 21, 15)\n","\n","# dilation\n","def dilate(image):\n","    kernel = np.ones((5,5),np.uint8)\n","    return cv2.dilate(image, kernel, iterations = 1)\n","    \n","# erosion\n","def erode(image):\n","    kernel = np.ones((5,5),np.uint8)\n","    return cv2.erode(image, kernel, iterations = 1)\n","\n","# opening - erosion followed by dilation\n","def opening(image):\n","    kernel = np.ones((5,5),np.uint8)\n","    return cv2.morphologyEx(image, cv2.MORPH_OPEN, kernel)\n","\n","# closing - dilation followed by erosion\n","def closing(image):\n","    kernel = np.ones((1,1),np.uint8)\n","    return cv2.morphologyEx(image, cv2.MORPH_CLOSE, kernel)\n"],"execution_count":1,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"D55c50mqDirY"},"source":["# Tesseract legacy"]},{"cell_type":"markdown","metadata":{"id":"pRbgu6NH2MYZ"},"source":["## Setup"]},{"cell_type":"code","metadata":{"id":"rOOurMbYDbcL"},"source":["!sudo add-apt-repository -y ppa:alex-p/tesseract-ocr\n","!sudo apt-get update\n","!sudo apt-get install tesseract-ocr libtesseract-dev libleptonica-dev pkg-config\n","!pip install tesserocr\n","\n","!curl -O https://raw.githubusercontent.com/tesseract-ocr/tessdata/4.1.0/eng.traineddata\n","!mv eng.traineddata /usr/share/tesseract-ocr/4.00/tessdata/"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"EbIZfG242RbH"},"source":["## Inference"]},{"cell_type":"code","metadata":{"id":"fk9sYYkjDkkF","executionInfo":{"status":"ok","timestamp":1633076819210,"user_tz":-120,"elapsed":35671,"user":{"displayName":"Leon Heller","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16860286207446221136"}}},"source":["import tesserocr\n","from PIL import Image\n","import os.path\n","import time\n","import logging\n","\n","logging.basicConfig(filename='tesseract-legacy.log', level=logging.INFO, filemode='w')\n","logging.info('Started')\n","\n","# directory = 'path-to-timing-dataset-folder' # for timing\n","directory = 'path-to-annotated-dataset-folder' # for CER and WER\n","texts = []\n","\n","ts = time.time()\n","with tesserocr.PyTessBaseAPI(oem=tesserocr.OEM.TESSERACT_ONLY, psm=tesserocr.PSM.SINGLE_BLOCK) as api:\n","  api.SetVariable('tessedit_char_whitelist', 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-+().,')\n","  api.SetVariable('tessedit_char_blacklist', '!?@#$%&*<>_=/:;\\'\"')\n","\n","  for filename in sorted(os.listdir(directory)):\n","    if filename.endswith('.jpg') or filename.endswith('.png'):\n","\n","        c = cv2.imread(os.path.join(directory, filename))\n","        t4 = time.time()\n","        g = get_grayscale(c)\n","        b = blur(g)\n","        t = thresholding(b)\n","        o = opening(t)\n","        cl = closing(o)\n","        im_pil = Image.fromarray(cl)\n","        api.SetImage(im_pil)\n","        output = api.GetUTF8Text()\n","        output = output.replace('\\n', ' ')\n","        texts.append(output)\n","\n","        t5 = time.time()\n","        logging.info('time for OCR: %s' % (t5-t4))\n","\n","t1=time.time()\n","logging.info('grand total: %s' % (t1-ts))\n","\n"],"execution_count":3,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"jqf5Mdwg2Ugv"},"source":["## Write output to text file"]},{"cell_type":"code","metadata":{"id":"G6XlpDJaDORD","executionInfo":{"status":"ok","timestamp":1633076819211,"user_tz":-120,"elapsed":13,"user":{"displayName":"Leon Heller","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16860286207446221136"}}},"source":["with open('out.txt', 'w') as o:\n","  for x in texts:\n","    o.write(x + '\\n')"],"execution_count":4,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ONKnkFLOOTkR"},"source":["# Tesseract LSTM"]},{"cell_type":"markdown","metadata":{"id":"cTDgwP6-2kDS"},"source":["## Setup"]},{"cell_type":"code","metadata":{"id":"EHpDhav3OVLZ"},"source":["!sudo add-apt-repository -y ppa:alex-p/tesseract-ocr\n","!sudo apt-get update\n","!sudo apt-get install tesseract-ocr libtesseract-dev libleptonica-dev pkg-config\n","!pip install tesserocr\n","\n","!curl -O https://raw.githubusercontent.com/tesseract-ocr/tessdata_fast/4.1.0/eng.traineddata\n","!mv eng.traineddata /usr/share/tesseract-ocr/4.00/tessdata/"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"JXbmyDpI2m5V"},"source":["## Inference"]},{"cell_type":"code","metadata":{"id":"4Tx_dq2qPRK-","executionInfo":{"status":"ok","timestamp":1633076839847,"user_tz":-120,"elapsed":7607,"user":{"displayName":"Leon Heller","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16860286207446221136"}}},"source":["import tesserocr\n","from PIL import Image\n","import os.path\n","import time\n","import logging\n","\n","logging.basicConfig(filename='tesseract-lstm.log', level=logging.INFO, filemode='w')\n","logging.info('Started')\n","\n","# directory = 'path-to-timing-dataset-folder' # for timing\n","directory = 'path-to-annotated-dataset-folder' # for CER and WER\n","texts = []\n","\n","ts = time.time()\n","with tesserocr.PyTessBaseAPI(oem=tesserocr.OEM.LSTM_ONLY, psm=tesserocr.PSM.SINGLE_BLOCK) as api:\n","  api.SetVariable('tessedit_char_whitelist', 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-+().,')\n","  api.SetVariable('tessedit_char_blacklist', '!?@#$%&*<>_=/:;\\'\"')\n","\n","\n","  for filename in sorted(os.listdir(directory)):\n","    if filename.endswith('.jpg') or filename.endswith('.png'):\n","\n","        c = cv2.imread(os.path.join(directory, filename))\n","        t4 = time.time()\n","        g = get_grayscale(c)\n","        b = blur(g)\n","        t = thresholding(b)\n","        o = opening(t)\n","        cl = closing(o)\n","        im_pil = Image.fromarray(cl)\n","        api.SetImage(im_pil)\n","        output = api.GetUTF8Text()\n","        output = output.replace('\\n', ' ')\n","        texts.append(output)\n","\n","        t5 = time.time()\n","        logging.info('time for OCR: %s' % (t5-t4))\n","\n","t1=time.time()\n","logging.info('grand total: %s' % (t1-ts))"],"execution_count":6,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"FYMDX3nX20ZF"},"source":["## Write output to text file"]},{"cell_type":"code","metadata":{"id":"xOL88AFJ20ZG","executionInfo":{"status":"ok","timestamp":1633076839847,"user_tz":-120,"elapsed":9,"user":{"displayName":"Leon Heller","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16860286207446221136"}}},"source":["with open('out.txt', 'w') as o:\n","  for x in texts:\n","    o.write(x + '\\n')"],"execution_count":7,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"QJtk4d5fU3wM"},"source":["# CRNN\n"]},{"cell_type":"markdown","metadata":{"id":"Yu9GDE_T25Jl"},"source":["## Setup"]},{"cell_type":"code","metadata":{"id":"knC9MY8lU5Ad"},"source":["!git clone https://github.com/GitYCC/crnn-pytorch\n","!mv crnn-pytorch crnnpytorch\n","!pip install deskew\n","%cd crnnpytorch/"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"iQrBFM8M1DPb","executionInfo":{"status":"ok","timestamp":1633076846700,"user_tz":-120,"elapsed":5,"user":{"displayName":"Leon Heller","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16860286207446221136"}}},"source":["from typing import Tuple, Union\n","import math\n","import numpy as np\n","\n","def rotate(image: np.ndarray, angle: float, background: Union[int, Tuple[int, int, int]]) -> np.ndarray:\n","    old_width, old_height = image.shape[:2]\n","    angle_radian = math.radians(angle)\n","    width = abs(np.sin(angle_radian) * old_height) + abs(np.cos(angle_radian) * old_width)\n","    height = abs(np.sin(angle_radian) * old_width) + abs(np.cos(angle_radian) * old_height)\n","\n","    image_center = tuple(np.array(image.shape[1::-1]) / 2)\n","    rot_mat = cv2.getRotationMatrix2D(image_center, angle, 1.0)\n","    rot_mat[1, 2] += (width - old_width) / 2\n","    rot_mat[0, 2] += (height - old_height) / 2\n","    return cv2.warpAffine(image, rot_mat, (int(round(height)), int(round(width))), borderValue=background, borderMode=cv2.BORDER_CONSTANT)"],"execution_count":9,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"gtNtCa1R3DRv"},"source":["## Inference"]},{"cell_type":"markdown","metadata":{"id":"Gxpp1rWZ3RME"},"source":["### without deskewing"]},{"cell_type":"code","metadata":{"id":"6l5KyYXcU9R0"},"source":["import torch\n","\n","from src.config import common_config as config\n","from src.model import CRNN\n","from src.ctc_decoder import ctc_decode\n","from PIL import Image\n","import numpy as np\n","import time\n","import os\n","import logging\n","from google.colab.patches import cv2_imshow\n","\n","logging.basicConfig(filename='crnn.log', level=logging.INFO, filemode='w')\n","logging.info('Started')\n","logging.info('Using torch %s %s' % (torch.__version__, torch.cuda.get_device_properties(0)))\n","\n","# directory = 'path-to-timing-dataset-folder' # for timing\n","directory = 'path-to-annotated-dataset-folder' # for CER and WER\n","img_height = config['img_height']\n","img_width = config['img_width']\n","decode_method = 'greedy'  # (greedy, beam_search or prefix_beam_search) [default: beam_search]\n","beam_size = 10  # default\n","\n","CHARS = '0123456789abcdefghijklmnopqrstuvwxyz'\n","CHAR2LABEL = {char: i + 1 for i, char in enumerate(CHARS)}\n","LABEL2CHAR = {label: char for char, label in CHAR2LABEL.items()}\n","\n","\n","device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n","print(f'device: {device}')\n","\n","num_class = len(LABEL2CHAR) + 1\n","crnn = CRNN(1, img_height, img_width, num_class,\n","            map_to_seq_hidden=config['map_to_seq_hidden'],\n","            rnn_hidden=config['rnn_hidden'],\n","            leaky_relu=config['leaky_relu'])\n","crnn.load_state_dict(torch.load('checkpoints/crnn_synth90k.pt', map_location=device)) # weight file included in the repository\n","crnn.to(device)\n","crnn.eval()\n","\n","borderSize = 0\n","\n","all_preds = []\n","\n","ts = time.time()\n","for filename in sorted(os.listdir(directory)):\n","  inputImage = cv2.imread(os.path.join(directory,filename))\n","  inputImage = cv2.resize(inputImage, (200, 400))\n","  t0 = time.time()\n","  grayImage = get_grayscale(inputImage)\n","  gaussianFilter = blur(grayImage)\n","  binarizedImage = thresholding(gaussianFilter)\n","\n","  binarizedImage[binarizedImage == 0] = 1\n","  binarizedImage[binarizedImage == 255] = 0\n","\n","  horizontal_projection = np.sum(binarizedImage, axis=1);\n","\n","  height, width = binarizedImage.shape\n","\n","  blankImage = np.zeros((height, width, 3), np.uint8)\n","\n","  blockCount = 0\n","  blockFlag = False\n","  lineBlocks = []\n","\n","  for row in range(height):\n","    cv2.line(blankImage, (0,row), (int(horizontal_projection[row]*width/height),row), (255,255,255), 1)\n","    if not blockFlag and int(horizontal_projection[row]*width/height) > 9:\n","      # add start line of block\n","      lineBlocks.append(row)\n","      blockFlag = True\n","    elif blockFlag and int(horizontal_projection[row]*width/height) < 10:\n","      # add end line of block\n","      lineBlocks.append(row)\n","      blockFlag = False\n","    elif blockFlag and row == height-1:\n","      # if char reaches to end of line\n","      lineBlocks.append(row)\n","      blockFlag = False\n","\n","  output = ''\n","  lines = []\n","  blackLines = []\n","  numLines = int(len(lineBlocks)/2)\n","  for line in range(numLines):\n","    with torch.no_grad():\n","      image = grayImage[lineBlocks[line*2]-borderSize if lineBlocks[line*2]-borderSize > 0 else 0:lineBlocks[line*2+1]+borderSize, 0:width]\n","      image = cv2.resize(image, (img_width, img_height))\n","      image = np.array(image)\n","      image = image.reshape((1, img_height, img_width))\n","      image = (image / 127.5) - 1.0\n","      image = torch.from_numpy(image).unsqueeze(0).float().to(device)\n","      logits = crnn(image)\n","      log_probs = torch.nn.functional.log_softmax(logits, dim=2)\n","\n","      preds = ctc_decode(log_probs, method=decode_method, beam_size=beam_size,\n","                        label2char=LABEL2CHAR)\n","      preds = ''.join(str(e) for e in preds)\n","      output += preds\n","      output += ' '\n","  \n","  all_preds.append(output)\n","\n","\n","  t1 = time.time()\n","\n","  logging.info('time for OCR: %s' % (t1-t0))\n","\n","te = time.time()\n","logging.info('grand total: %s' % (te-ts))"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"-AdFgzWz3ob0"},"source":["### write output to file"]},{"cell_type":"code","metadata":{"id":"rmbhdtTLR5jg","executionInfo":{"status":"ok","timestamp":1633076911641,"user_tz":-120,"elapsed":179,"user":{"displayName":"Leon Heller","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16860286207446221136"}}},"source":["with open('out.txt', 'w') as o:\n","  for x in all_preds:\n","    x = x.replace('[', '')\n","    x = x.replace(']', '')\n","    x = x.replace('\\'', '')\n","    x = x.replace(', ', '')\n","\n","    o.write(x + '\\n')"],"execution_count":12,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Dkh4Xv3t3w6Z"},"source":["### with deskewing"]},{"cell_type":"code","metadata":{"id":"26RjaiSn3w6a"},"source":["import torch\n","\n","from src.config import common_config as config\n","from src.model import CRNN\n","from src.ctc_decoder import ctc_decode\n","from PIL import Image\n","import numpy as np\n","import time\n","import os\n","import logging\n","from deskew import determine_skew\n","from google.colab.patches import cv2_imshow\n","\n","logging.basicConfig(filename='crnn.log', level=logging.INFO, filemode='w')\n","logging.info('Started')\n","logging.info('Using torch %s %s' % (torch.__version__, torch.cuda.get_device_properties(0)))\n","\n","# directory = 'path-to-timing-dataset-folder' # for timing\n","directory = 'path-to-annotated-dataset-folder' # for CER and WER\n","img_height = config['img_height']\n","img_width = config['img_width']\n","decode_method = 'greedy'  # (greedy, beam_search or prefix_beam_search) [default: beam_search]\n","beam_size = 10  # default\n","\n","CHARS = '0123456789abcdefghijklmnopqrstuvwxyz'\n","CHAR2LABEL = {char: i + 1 for i, char in enumerate(CHARS)}\n","LABEL2CHAR = {label: char for char, label in CHAR2LABEL.items()}\n","\n","\n","device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n","print(f'device: {device}')\n","\n","num_class = len(LABEL2CHAR) + 1\n","crnn = CRNN(1, img_height, img_width, num_class,\n","            map_to_seq_hidden=config['map_to_seq_hidden'],\n","            rnn_hidden=config['rnn_hidden'],\n","            leaky_relu=config['leaky_relu'])\n","crnn.load_state_dict(torch.load('checkpoints/crnn_synth90k.pt', map_location=device)) # weight file included in the repository\n","crnn.to(device)\n","crnn.eval()\n","\n","borderSize = 0\n","\n","all_preds = []\n","\n","ts = time.time()\n","for filename in sorted(os.listdir(directory)):\n","  inputImage = cv2.imread(os.path.join(directory,filename))\n","  inputImage = cv2.resize(inputImage, (200, 400))\n","  t0 = time.time()\n","  grayImage = get_grayscale(inputImage)\n","  angle = determine_skew(grayImage)\n","  if angle is not None:\n","    if abs(angle)>45:\n","      angle = angle + 90\n","    grayImage = rotate(grayImage, angle, (255, 255, 255))\n","  gaussianFilter = blur(grayImage)\n","  binarizedImage = thresholding(gaussianFilter)\n","\n","  binarizedImage[binarizedImage == 0] = 1\n","  binarizedImage[binarizedImage == 255] = 0\n","\n","  horizontal_projection = np.sum(binarizedImage, axis=1);\n","\n","  height, width = binarizedImage.shape\n","\n","  blankImage = np.zeros((height, width, 3), np.uint8)\n","\n","  blockCount = 0\n","  blockFlag = False\n","  lineBlocks = []\n","\n","  for row in range(height):\n","    cv2.line(blankImage, (0,row), (int(horizontal_projection[row]*width/height),row), (255,255,255), 1)\n","    if not blockFlag and int(horizontal_projection[row]*width/height) > 9:\n","      # add start line of block\n","      lineBlocks.append(row)\n","      blockFlag = True\n","    elif blockFlag and int(horizontal_projection[row]*width/height) < 10:\n","      # add end line of block\n","      lineBlocks.append(row)\n","      blockFlag = False\n","    elif blockFlag and row == height-1:\n","      # if char reaches to end of line\n","      lineBlocks.append(row)\n","      blockFlag = False\n","\n","  output = ''\n","  lines = []\n","  blackLines = []\n","  numLines = int(len(lineBlocks)/2)\n","  for line in range(numLines):\n","    with torch.no_grad():\n","      image = grayImage[lineBlocks[line*2]-borderSize if lineBlocks[line*2]-borderSize > 0 else 0:lineBlocks[line*2+1]+borderSize, 0:width]\n","      image = cv2.resize(image, (img_width, img_height))\n","      image = np.array(image)\n","      image = image.reshape((1, img_height, img_width))\n","      image = (image / 127.5) - 1.0\n","      image = torch.from_numpy(image).unsqueeze(0).float().to(device)\n","      logits = crnn(image)\n","      log_probs = torch.nn.functional.log_softmax(logits, dim=2)\n","\n","      preds = ctc_decode(log_probs, method=decode_method, beam_size=beam_size,\n","                        label2char=LABEL2CHAR)\n","      preds = ''.join(str(e) for e in preds)\n","      output += preds\n","      output += ' '\n","  \n","  all_preds.append(output)\n","\n","\n","  t1 = time.time()\n","\n","  logging.info('time for OCR: %s' % (t1-t0))\n","\n","te = time.time()\n","logging.info('grand total: %s' % (te-ts))"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"7kXbbQgO3w6b"},"source":["### write output to file"]},{"cell_type":"code","metadata":{"id":"_IIvH3Zh3w6c","executionInfo":{"status":"ok","timestamp":1633076961032,"user_tz":-120,"elapsed":3,"user":{"displayName":"Leon Heller","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16860286207446221136"}}},"source":["with open('out.txt', 'w') as o:\n","  for x in all_preds:\n","    x = x.replace('[', '')\n","    x = x.replace(']', '')\n","    x = x.replace('\\'', '')\n","    x = x.replace(', ', '')\n","\n","    o.write(x + '\\n')"],"execution_count":14,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ES8CAW8NZPmg"},"source":["# Classification pipeline"]},{"cell_type":"markdown","metadata":{"id":"-M-wSAyb4bas"},"source":["## Setup"]},{"cell_type":"code","metadata":{"id":"d3CxD1WuY--X"},"source":["!pip install deskew"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"b9IJR2QqZbZl","executionInfo":{"status":"ok","timestamp":1633076964380,"user_tz":-120,"elapsed":4,"user":{"displayName":"Leon Heller","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16860286207446221136"}}},"source":["import math\n","from typing import Tuple, Union\n","\n","import cv2\n","import numpy as np\n","\n","from deskew import determine_skew\n","\n","\n","def rotate(\n","        image: np.ndarray, angle: float, background: Union[int, Tuple[int, int, int]]\n",") -> np.ndarray:\n","    old_width, old_height = image.shape[:2]\n","    angle_radian = math.radians(angle)\n","    width = abs(np.sin(angle_radian) * old_height) + abs(np.cos(angle_radian) * old_width)\n","    height = abs(np.sin(angle_radian) * old_width) + abs(np.cos(angle_radian) * old_height)\n","\n","    image_center = tuple(np.array(image.shape[1::-1]) / 2)\n","    rot_mat = cv2.getRotationMatrix2D(image_center, angle, 1.0)\n","    rot_mat[1, 2] += (width - old_width) / 2\n","    rot_mat[0, 2] += (height - old_height) / 2\n","    return cv2.warpAffine(image, rot_mat, (int(round(height)), int(round(width))), borderValue=background, borderMode=cv2.BORDER_CONSTANT)\n"],"execution_count":16,"outputs":[]},{"cell_type":"code","metadata":{"id":"qqOcQpTHZn5B","executionInfo":{"status":"ok","timestamp":1633076964692,"user_tz":-120,"elapsed":315,"user":{"displayName":"Leon Heller","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16860286207446221136"}}},"source":["hu_baseline = []\n","\n","with open('path-to-hu-baseline-arial-normal') as h: # path to prepared file containing Hu baseline numbers for normal Arial font\n","  lines = h.readlines()\n","\n","for x in lines:\n","  hu_baseline.append(x.strip())\n","\n","with open('path-to-hu-baseline-arial-bold') as h: # path to prepared file containing Hu baseline numbers for bold Arial font\n","  lines = h.readlines()\n","\n","for x in lines:\n","  hu_baseline.append(x.strip())"],"execution_count":17,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"fp71aKzA4mYh"},"source":["## Inference"]},{"cell_type":"markdown","metadata":{"id":"iggMjvGA4vgU"},"source":["### without deskewing"]},{"cell_type":"code","metadata":{"id":"WZLWiAGCZx5I","executionInfo":{"status":"ok","timestamp":1633076977888,"user_tz":-120,"elapsed":13197,"user":{"displayName":"Leon Heller","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16860286207446221136"}}},"source":["import cv2\n","from google.colab.patches import cv2_imshow\n","import time\n","from math import copysign, log10\n","import functools\n","import logging\n","import os\n","\n","logging.basicConfig(filename='class-hu-nodeskew.log', level=logging.INFO, filemode='w')\n","logging.info('Started')\n","\n","# directory = 'path-to-timing-dataset-folder' # for timing\n","directory = 'path-to-annotated-dataset-folder' # for CER and WER\n","\n","i, sma, smb = 0, 0, 0\n","eps = 1.e-5\n","mmm = 0\n","result = 0;\n","anyA, anyB = False, False\n","results = {}\n","radius = 8\n","output = []\n","\n","ts = time.time()\n","\n","for filename in sorted(os.listdir(directory)):\n","  if filename.endswith('.jpg') or filename.endswith('.png'):\n","    prediction = ''\n","    image = cv2.imread(os.path.join(directory,filename))\n","    \n","    t0=time.time()\n","\n","    gray = get_grayscale(image)\n","    b = blur(gray)\n","    t = thresholding(b)\n","    o = opening(t)\n","    cl = closing(o)\n","    thresh = cv2.bitwise_not(cl)\n","\n","    contours, hierarchy = cv2.findContours(thresh,cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_NONE)\n","\n","    coord = []\n","    for contour in contours:  \n","        [x,y,w,h] = cv2.boundingRect(contour)\n","        if h>6 and w>60:   \n","            continue   \n","        if h<5 or w<3:   \n","            continue  \n","        coord.append((x,y,w,h))\n","\n","    def compare(rect1, rect2):\n","        if abs(rect1[1] - rect2[1]) > 10:\n","            return rect1[1] - rect2[1]\n","        else:\n","            return rect1[0] - rect2[0]\n","\n","    coord = sorted(coord, key=functools.cmp_to_key(compare))\n","\n","    buchstaben = []\n","    hu = []\n","    #hu2 = []\n","    count = 0\n","    for cor in coord:\n","      [x,y,w,h] = cor\n","      t = thresh[y:y+h,x:x+w]\n","      img = cv2.copyMakeBorder(t, 6, 5, 5, 5, cv2.BORDER_CONSTANT, value=0)\n","      img = cv2.resize(img, (32, 32))\n","\n","      x = cv2.moments(img)\n","      x = cv2.HuMoments(x)\n","\n","      # Log scale hu moments \n","      for i in range(0,7):\n","        if x[i] > 0:\n","          x[i] = -1* copysign(1.0, x[i]) * log10(abs(x[i]))\n","\n","      hu.append(x)\n","\n","    for x in range(len(hu)):\n","      ma = hu[x]\n","      for c in range(len(hu_baseline)):\n","        mb = hu_baseline[c][4:]\n","        mb = mb.split(' ')\n","        mb = np.asarray(mb, dtype=np.float64)\n","        key = hu_baseline[c][0:3]\n","        result = 0\n","        for i in range(7):\n","\n","          ama = abs(ma[i])\n","          amb = abs(mb[i])\n","\n","          if (ama > 0):\n","            anyA = True\n","          if (amb > 0):\n","            anyB = True\n","\n","          if (ma[i] > 0):\n","            sma = 1\n","          elif (ma[i] < 0):\n","            sma = -1\n","          else:\n","            sma = 0\n","          if (mb[i] > 0):\n","            smb = 1\n","          elif (mb[i] < 0):\n","            smb = -1\n","          else:\n","            smb = 0\n","\n","          if (ama > eps and amb > eps):\n","\n","            ama = sma * log10(ama)\n","            amb = smb * log10(amb)\n","            result += abs(-ama + amb)\n","\n","        if (anyA != anyB):\n","          result = sys.float_info.max\n","\n","        results[key] = result\n","\n","      prediction += min(results, key=results.get)[0]\n","\n","    output.append(prediction)\n","    \n","  t1 = time.time()\n","  logging.info('time for OCR: %s' % (t1-t0))\n","\n","te = time.time()\n","logging.info('grand total: %s' % (te-ts))"],"execution_count":18,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"FdmGgQuN5Zeo"},"source":["### write output to file"]},{"cell_type":"code","metadata":{"id":"o54NyJfj5bWB","executionInfo":{"status":"ok","timestamp":1633076978112,"user_tz":-120,"elapsed":2,"user":{"displayName":"Leon Heller","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16860286207446221136"}}},"source":["with open('out.txt', 'w') as o:\n","  for x in output:\n","    o.write(x + '\\n')"],"execution_count":19,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"tAGRNgUy5fki"},"source":["### with deskewing"]},{"cell_type":"code","metadata":{"id":"_GOhNtMT5miO","executionInfo":{"status":"ok","timestamp":1633076995196,"user_tz":-120,"elapsed":17085,"user":{"displayName":"Leon Heller","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16860286207446221136"}}},"source":["import cv2\n","from google.colab.patches import cv2_imshow\n","import time\n","from math import copysign, log10\n","import functools\n","import logging\n","import os\n","\n","logging.basicConfig(filename='class-hu-nodeskew.log', level=logging.INFO, filemode='w')\n","logging.info('Started')\n","\n","# directory = 'path-to-timing-dataset-folder' # for timing\n","directory = 'path-to-annotated-dataset-folder' # for CER and WER\n","\n","i, sma, smb = 0, 0, 0\n","eps = 1.e-5\n","mmm = 0\n","result = 0;\n","anyA, anyB = False, False\n","results = {}\n","radius = 8\n","output = []\n","\n","ts = time.time()\n","\n","for filename in sorted(os.listdir(directory)):\n","  if filename.endswith('.jpg') or filename.endswith('.png'):\n","    prediction = ''\n","    image = cv2.imread(os.path.join(directory,filename))\n","    \n","    t0=time.time()\n","\n","    gray = get_grayscale(image)\n","    angle = determine_skew(gray)\n","    if angle is not None:\n","      if abs(angle)>45:\n","        angle = angle + 90\n","      rotated = rotate(gray, angle, (255, 255, 255))\n","    else:\n","      rotated=gray\n","    b = blur(rotated)\n","    t = thresholding(b)\n","    o = opening(t)\n","    cl = closing(o)\n","    thresh = cv2.bitwise_not(cl)\n","\n","    contours, hierarchy = cv2.findContours(thresh,cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_NONE)\n","\n","    coord = []\n","    for contour in contours:  \n","        [x,y,w,h] = cv2.boundingRect(contour)\n","        if h>6 and w>60:   \n","            continue   \n","        if h<5 or w<3:   \n","            continue  \n","        coord.append((x,y,w,h))\n","\n","    def compare(rect1, rect2):\n","        if abs(rect1[1] - rect2[1]) > 10:\n","            return rect1[1] - rect2[1]\n","        else:\n","            return rect1[0] - rect2[0]\n","\n","    coord = sorted(coord, key=functools.cmp_to_key(compare))\n","\n","    buchstaben = []\n","    hu = []\n","    #hu2 = []\n","    count = 0\n","    for cor in coord:\n","      [x,y,w,h] = cor\n","      t = thresh[y:y+h,x:x+w]\n","      img = cv2.copyMakeBorder(t, 6, 5, 5, 5, cv2.BORDER_CONSTANT, value=0)\n","      img = cv2.resize(img, (32, 32))\n","\n","      x = cv2.moments(img)\n","      x = cv2.HuMoments(x)\n","\n","      # Log scale hu moments \n","      for i in range(0,7):\n","        if x[i] > 0:\n","          x[i] = -1* copysign(1.0, x[i]) * log10(abs(x[i]))\n","\n","      hu.append(x)\n","\n","    for x in range(len(hu)):\n","      ma = hu[x]\n","      for c in range(len(hu_baseline)):\n","        mb = hu_baseline[c][4:]\n","        mb = mb.split(' ')\n","        mb = np.asarray(mb, dtype=np.float64)\n","        key = hu_baseline[c][0:3]\n","        result = 0\n","        for i in range(7):\n","\n","          ama = abs(ma[i])\n","          amb = abs(mb[i])\n","\n","          if (ama > 0):\n","            anyA = True\n","          if (amb > 0):\n","            anyB = True\n","\n","          if (ma[i] > 0):\n","            sma = 1\n","          elif (ma[i] < 0):\n","            sma = -1\n","          else:\n","            sma = 0\n","          if (mb[i] > 0):\n","            smb = 1\n","          elif (mb[i] < 0):\n","            smb = -1\n","          else:\n","            smb = 0\n","\n","          if (ama > eps and amb > eps):\n","\n","            ama = sma * log10(ama)\n","            amb = smb * log10(amb)\n","            result += abs(-ama + amb)\n","\n","        if (anyA != anyB):\n","          result = sys.float_info.max\n","\n","        results[key] = result\n","\n","      prediction += min(results, key=results.get)[0]\n","\n","    output.append(prediction)\n","    \n","  t1 = time.time()\n","  logging.info('time for OCR: %s' % (t1-t0))\n","\n","te = time.time()\n","logging.info('grand total: %s' % (te-ts))"],"execution_count":20,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"lA3rHScJ5iqn"},"source":["### write output to file"]},{"cell_type":"code","metadata":{"id":"_Ib-sgQm5ku7","executionInfo":{"status":"ok","timestamp":1633076995831,"user_tz":-120,"elapsed":1,"user":{"displayName":"Leon Heller","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"16860286207446221136"}}},"source":["with open('out.txt', 'w') as o:\n","  for x in output:\n","    o.write(x + '\\n')"],"execution_count":21,"outputs":[]}]}